#!/usr/bin/env python3
"""
Test script to verify that multiple resume parser generates compatible embeddings
for search APIs.
"""

import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from embeddings.vectorizer import AddUserDataVectorizer
from apis.multiple_resume_parser_api import generate_embeddings_for_resume


def test_embedding_field_compatibility():
    """Test that embedding fields generated by multiple resume parser are compatible with search APIs."""

    # Sample resume data (similar to what multipleresumepraser would generate)
    sample_resume_data = {
        "name": "John Doe",
        "email": "john.doe@example.com",
        "phone": "+1-234-567-8900",
        "user_id": "test_user_123",
        "username": "john_doe",
        "total_experience": "5 years",
        "skills": ["Python", "Machine Learning", "Django", "React"],
        "may_also_known_skills": ["TensorFlow", "AWS"],
        "experience": [
            {
                "title": "Senior Software Engineer",
                "company": "Tech Corp",
                "from_date": "2020-01-01",
                "until": "Present",
            },
            {
                "title": "Software Engineer",
                "company": "StartupXYZ",
                "from_date": "2018-06-01",
                "until": "2019-12-31",
            },
        ],
        "academic_details": [
            {
                "education": "Bachelor of Computer Science",
                "college": "University of Technology",
                "pass_year": "2018",
            }
        ],
        "contact_details": {
            "name": "John Doe",
            "email": "john.doe@example.com",
            "phone": "+1-234-567-8900",
            "current_city": "San Francisco",
            "looking_for_jobs_in": ["San Francisco", "New York"],
            "pan_card": "ABCDE1234F",
        },
        "combined_resume": "Senior Software Engineer with 5 years of experience in Python, Machine Learning, and web development.",
    }

    print("üß™ Testing embedding field compatibility...")
    print("=" * 60)

    # Test 1: Generate embeddings using AddUserDataVectorizer directly
    print("üìä Test 1: Direct AddUserDataVectorizer")
    vectorizer = AddUserDataVectorizer()
    direct_embeddings = vectorizer.generate_resume_embeddings(sample_resume_data.copy())

    direct_vector_fields = [
        key for key in direct_embeddings.keys() if key.endswith("_vector")
    ]
    print(f"‚úÖ Direct vectorizer generated fields: {direct_vector_fields}")

    # Test 2: Generate embeddings using multiple resume parser function
    print("\nüìä Test 2: Multiple Resume Parser Function")
    parser_embeddings = generate_embeddings_for_resume(sample_resume_data.copy())

    parser_vector_fields = [
        key for key in parser_embeddings.keys() if key.endswith("_vector")
    ]
    print(f"‚úÖ Parser function generated fields: {parser_vector_fields}")

    # Test 3: Check compatibility
    print("\nüîç Test 3: Compatibility Check")
    expected_fields = [
        "skills_vector",
        "experience_text_vector",
        "education_text_vector",
        "combined_resume_vector",
        "total_resume_vector",
    ]

    print(f"Expected fields for search compatibility: {expected_fields}")

    # Check if parser generates the expected fields
    missing_fields = []
    for field in expected_fields:
        if field not in parser_vector_fields:
            missing_fields.append(field)

    if not missing_fields:
        print("‚úÖ SUCCESS: All expected vector fields are generated!")
        print("‚úÖ Multiple resume parser embeddings are compatible with search APIs!")
    else:
        print(f"‚ùå FAILURE: Missing vector fields: {missing_fields}")
        return False

    # Test 4: Check field consistency between methods
    print("\nüîÑ Test 4: Field Consistency Check")
    direct_set = set(direct_vector_fields)
    parser_set = set(parser_vector_fields)

    if direct_set == parser_set:
        print("‚úÖ SUCCESS: Both methods generate identical vector fields!")
    else:
        print(f"‚ö†Ô∏è  WARNING: Field differences detected:")
        print(f"   Direct only: {direct_set - parser_set}")
        print(f"   Parser only: {parser_set - direct_set}")

    # Test 5: Verify vector dimensions match
    print("\nüìè Test 5: Vector Dimension Check")
    try:
        sample_field = "skills_vector"
        if sample_field in direct_embeddings and sample_field in parser_embeddings:
            direct_dim = len(direct_embeddings[sample_field])
            parser_dim = len(parser_embeddings[sample_field])

            if direct_dim == parser_dim:
                print(f"‚úÖ SUCCESS: Vector dimensions match ({direct_dim})")
            else:
                print(
                    f"‚ùå FAILURE: Vector dimension mismatch - Direct: {direct_dim}, Parser: {parser_dim}"
                )
                return False
        else:
            print(f"‚ö†Ô∏è  WARNING: Could not compare dimensions for {sample_field}")
    except Exception as e:
        print(f"‚ùå ERROR in dimension check: {e}")
        return False

    print("\n" + "=" * 60)
    print(
        "üéâ ALL TESTS PASSED! Multiple resume parser is now compatible with search APIs!"
    )
    return True


if __name__ == "__main__":
    success = test_embedding_field_compatibility()
    if success:
        print("\n‚úÖ You can now use multiple resume parser and search APIs together!")
        print("üìù Next steps:")
        print("   1. Test with actual resume files")
        print("   2. Verify search results include data from multiple resume parser")
        print("   3. Monitor embedding generation performance")
    else:
        print("\n‚ùå Issues found. Please check the implementation.")

    sys.exit(0 if success else 1)
